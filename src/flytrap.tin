# flytrap.tcl
################################################################################
# Debugging and dev tools for Tcl

# Copyright (C) 2023 Alex Baker, ambaker1@mtu.edu
# All rights reserved. 

# See the file "LICENSE" in the top level directory for information on usage, 
# redistribution, and for a DISCLAIMER OF ALL WARRANTIES.
################################################################################

package require wob 0.1

# Define namespace
namespace eval ::flytrap {
    # Internal variables
    variable DEBUG 0; # For testing flytrap and pause (no interactive mode)
    variable INFO ""; # Pause line info dictionary (defined in InterpretFrame)
    variable debugType; # -file or -body. For "flytrap" and "debug"
    variable debugBody; # Command passed to internal Eval command
    variable maxDepth; # Maximum debug depth
    variable verboseFlag; # Whether debug is verbose, or only prints on error.
    variable baseLevel; # Level at which the debug command was called
    variable stepHistory; # History of enter and leave traces in Eval
    variable errorStack; # Commands evaluated before error
    variable excludeList {catch try}; # Commands to ignore when in debug
    variable myLocation [file normalize [info script]]; # library file path
    # tclvars: global variables used by Tcl
    # https://www.tcl-lang.org/man/tcl/TclCmd/tclvars.htm
    variable tclvars {
        argc argv argv0 auto_index auto_path env errorCode errorInfo 
        tcl_interactive tcl_library tcl_nonwordchars tcl_patchLevel 
        tcl_pkgPath tcl_platform tcl_precision tcl_rcFileName 
        tcl_traceCompile tcl_traceExec tcl_wordchars tcl_version
    }
       
    # Exported commands
    namespace export pause; # Enter interactive mode in current level
    namespace export flytrap; # Catch bugs in a Tcl script
	namespace export pvar; # Print variables with their values
	namespace export viewVars; # Open an interactive variable viewer widget
    namespace export assert; # Throw error if result is not expected
}

# pause --
#
# Pauses the script, states the source file and line number it is on, 
# and then enters the event loop, processing user input.
# Pressing enter continues the analysis.
# To pass results to caller, use return.
# When in DEBUG mode, does not pause, just returns INFO
#
# Syntax:
# pause

proc ::flytrap::pause {} {
    variable DEBUG
    variable INFO ""
    # Get frame info of caller
    set addLines 0; # Line number of outer eval in proc or file
    for {set i 1} {$i < [info frame]} {incr i} {
        lassign [InterpretFrame [info frame -$i] $addLines] break addLines
        if {$break} break
    }
    # If DEBUG, just return the line info (for testing)
    if {$DEBUG} {
        return $INFO
    }
    # Print pause line information and enter interactive mode
    puts "PAUSED...\n($INFO)"
    uplevel 1 [list ::wob::mainLoop break]
}

# InterpretFrame --
#
# Private procedure used by both pause and flytrap to interpret frame info
# Returns a list of whether to break, and the number of lines to add next.
#
# Syntax:
# InterpretFrame $frame $addLines
#
# Arguments:
# frame         Frame dictionary to interpret
# addLines      Lines to add.

proc ::flytrap::InterpretFrame {frame addLines} {
    variable INFO ""
    # Initialize info with line number (plus addLines)
    set line [dict get $frame line]
    dict set INFO line [incr line $addLines]
    # Get remainder of info depending on type
    set break 0
    set addLines 0
    switch [dict get $frame type] {
        source { # Frame is a file
            dict set INFO file "\"[dict get $frame file]\""
            set break 1
        }
        proc { # Frame is a proc frame
            if {[dict exists $frame proc]} {
                # Normal proc call
                dict set INFO proc [dict get $frame proc]
            } elseif {[dict exists $frame method]} {
                # TclOO method call
                dict set INFO method [dict get $frame method]
                dict set INFO class [dict get $frame class]
                # In Tcl 8.6.10, there is no call frame for the file in 
                # which the constructor is defined. And for the destructor,
                # the calling file line number is -1. So simply return the
                # line number in the constructor/destructor.
                if {[dict get $frame method] in {<constructor> <destructor>}} {
                    set break 1
                }
            }
        }
        eval { # Frame is a command evaluation. Add lines to next frame.
            dict set INFO cmd "\{[dict get $frame cmd]\}"
            set addLines [expr {$line - 1}]
        }
    }
    # Join the INFO dict, which preserves the quotes and braces
    set INFO [join $INFO]
    # Return a boolean of whether to break out of the frame loop, and
    # return the number of lines to add to the next loop iteration.
    return [list $break $addLines]
}

# flytrap --
#
# Step through a script, expanding out all commands using enter/leave traces
# If verbose, prints out everything. If not, only the commands up to an error.
# When an error is encountered, it pauses there and displays the line INFO.
# When in DEBUG mode, it does not pause, just catches the error and returns INFO
# 
# Syntax:
# flytrap -file $filename <$depth> <$verbose> <$varName>
# flytrap -body $script <$depth> <$verbose> <$varName>
#
# Arguments:
# filename      File path of file to source (only with -file)
# script        Tcl script to eval (only with -body)
# depth         Debug depth. Default 0. Steps into procedures if > 0
# verbose       To print out commands and intermediate steps. Default 0

proc ::flytrap::flytrap {type input {depth 0} {verbose 0}} {
    variable DEBUG
    variable INFO ""
    variable debugType $type
    variable debugBody ""
    variable maxDepth $depth
    variable verboseFlag $verbose
    variable baseLevel [info level]
    variable stepHistory ""
    variable errorStack ""
    
    # Determine debugBody from debugType
    switch $debugType {
        -file {set debugBody [list source $input]}
        -body {set debugBody $input}
        default {return -code error "unknown option $debugType"}
    }

    # Check input
    if {![string is integer $depth] || $depth < 0} {
        return -code error "Depth must be integer >= 0"
    }

    # Evaluate command with recursive execution trace
    trace add execution Eval enterstep ::flytrap::EnterStep
    trace add execution Eval leavestep ::flytrap::LeaveStep
    catch {Eval $debugBody} result options
    trace remove execution Eval enterstep ::flytrap::EnterStep
    trace remove execution Eval leavestep ::flytrap::LeaveStep
    # Handle debug case
    if {$DEBUG} {
        return $INFO
    }
    # Return normally to user
    return -options $options $result
}

# Eval --
#
# Private procedure to evaluate code, while being debugged.
#
# Arguments:
# body:     Body of code to evaluate

proc ::flytrap::Eval {body} {uplevel 2 $body}

# EnterStep --
# 
# Private procedure to print out intermediate steps

proc ::flytrap::EnterStep {cmdString args} {
    variable debugType
    variable debugBody
    variable maxDepth
    variable verboseFlag
    variable baseLevel
    variable stepHistory
    variable errorStack
    set depth [expr {[info level] - $baseLevel}]
    if {$depth <= $maxDepth} {
        if {$cmdString ne [list uplevel 2 $debugBody]} {
            lappend errorStack $cmdString; # push
            if {[llength $errorStack] == 1 && $debugType eq "-file"} {
                return
            }
            if {$verboseFlag} {
                set prefix [string repeat "  " $depth]
                puts "$prefix> $cmdString"
            }
            lappend stepHistory enter $depth $cmdString
        }; # end if command not main uplevel
    }; # end if valid depth
    return
}

# LeaveStep --
# 
# Private procedure to print out results from intermediate steps

proc ::flytrap::LeaveStep {cmdString code result args} {
    variable DEBUG
    variable INFO
    variable debugType
    variable debugBody
    variable maxDepth
    variable verboseFlag
    variable baseLevel
    variable stepHistory
    variable errorStack
    variable excludeList
    variable myLocation
    set depth [expr {[info level] - $baseLevel}]
    if {$depth <= $maxDepth} {
        # Handle command and error stacks
        if {$cmdString ne [list uplevel 2 $debugBody]} {
            set errorStack [lreplace $errorStack end end]; # pop
            if {$verboseFlag} {
                set prefix [string repeat "  " $depth]
                if {$result ne ""} {puts "$prefix$result"}
            }
            lappend stepHistory leave $depth $result
        }; # end if command not main uplevel
        # Process error not controlled by "catch"
        if {$code == 1} {
            # Verify that it is not wrapped by a built-in error handler
            foreach command $errorStack {
                if {[lindex $command 0] in $excludeList} {
                    return
                }
            }
            # Print command history if not verbose
            if {!$verboseFlag} {
                foreach {type depth string} $stepHistory {
                    set prefix [string repeat "  " $depth]
                    switch $type {
                        enter {puts "$prefix> $string"}
                        leave {if {$result ne ""} {puts "$prefix$string"}}
                    }
                }
            }

            # Get location of error from frame stack
            set foundError 0; # Flag for if the error was found in the stack
            set addLines 0; # Line number of outer eval in proc or file
            for {set i 1} {$i < [info frame]} {incr i} {
                set frame [info frame -$i]
                if {[dict get $frame type] eq "precompiled"} {
                    continue
                }
                # Looking for "LeaveStep" frame
                if {!$foundError} {
                    if {[dict get $frame type] eq "eval"} {
                        set frameCmd [lindex [dict get $frame cmd] 0]
                        if {$frameCmd eq "::flytrap::LeaveStep"} {
                            set foundError 1
                        }
                    }
                    continue
                }
                lassign [InterpretFrame $frame $addLines] break addLines
                if {$break} break
            }
            
            # Print error line information and enter interactive mode
            if {!$DEBUG} {
                puts "ERROR...\n($INFO)"
                uplevel 1 [list ::wob::mainLoop break]
            }
            # Remove traces, which then unwinds the interpreter
            trace remove execution Eval enterstep ::flytrap::EnterStep
            trace remove execution Eval leavestep ::flytrap::LeaveStep
        }
    }; # end if valid depth
    return
}

# pvar --
#
# Same idea as parray. Prints the value of a variable to screen.
# If variable is array, parray will be called, with no pattern.
#
# Arguments:
# args:         Names of variable to print

proc ::flytrap::pvar {args} {
    foreach arg $args {
        upvar 1 $arg var
        if {![info exists var]} {
            return -code error "can't read \"$arg\": no such variable"
        } elseif {[array exists var]} {
            uplevel 1 [list parray $arg]
        } else {
            puts "$arg = $var"
        }
    }
    return
}

# viewVars --
#
# Open a Tk table to view all variables in current scope, allowing for 
# selection and copying. Requires package Tktable and dependent packages

proc ::flytrap::viewVars {args} {
    variable tclvars
    # Create widget interpreter and ensure required packages are available
    set widget [::wob::widget new "Workspace"]
    $widget eval {package require Tktable}
    
    # Initialize cells with header
    set cells(0,0) "Variable"
    set cells(0,1) "Value"
    
    # Fill with sorted variables and values
    if {[llength $args] == 0} {
        set vars [uplevel 1 {info vars}]
        # Filter out tclvars
        if {[info level] == 1} {
            foreach tclvar $tclvars {
                set i [lsearch -exact $vars $tclvar]
                set vars [lreplace $vars $i $i]
            }
        }
    } else {
        set vars $args
    }
    set i 1
    foreach var [lsort $vars] {
        if {[uplevel 1 [list array exists $var]]} {
            # Array case
            foreach key [lsort [uplevel 1 [list array names $var]]] {
                set cells($i,0) "$var\($key\)"
                set cells($i,1) [uplevel 1 [list subst "$\{$var\($key\)\}"]]
                incr i
            }
        } else {
            # Scalar case
            set cells($i,0) $var
            set cells($i,1) [uplevel 1 [list subst "$\{$var\}"]]
            incr i
        }
    }
    
    # Pass cells to widget interpreter
    $widget eval [list array set cells [array get cells]]
    
    # Create workspace widget
    $widget eval {
        # Modify the clipboard function to copy correctly from table
        trace add execution clipboard leave TrimClipBoard
        proc TrimClipBoard {cmdString args} {
            if {[lindex $cmdString 1] eq "append"} {
                set clipboard [clipboard get]
                clipboard clear
                clipboard append [join [join $clipboard]]
            }
        }

        # Create frame, scroll bar, and button
        frame .f -bd 2 -relief groove
        scrollbar .f.sbar -command {.f.tbl yview}
        
        # Create table
        table .f.tbl -rows [expr {[array size cells]/2}] -cols 2 \
                -titlerows 1 -height 10 -width 2 \
                -yscrollcommand {.f.sbar set} -invertselected 1 \
                -variable cells -state disabled -wrap 1 \
                -rowstretchmode unset -colstretchmode all
        .f.tbl tag configure active -fg black
        .f.tbl height 0 1; # Height of title row 
        .f.tbl width 0 20 1 40; # Width of var and val columns

        # Arrange widget
        grid .f -column 0 -row 0 -columnspan 2 -rowspan 1 -sticky nsew
        grid .f.tbl -column 0 -row 1 -columnspan 1 -rowspan 1 -sticky nsew
        grid .f.sbar -column 1 -row 1 -columnspan 1 -rowspan 1 -sticky ns
        grid columnconfigure . all -weight 1
        grid rowconfigure . all -weight 1
        grid columnconfigure .f .f.tbl -weight 1
        grid rowconfigure .f .f.tbl -weight 1
        # Wait for user to close widget
        vwait forever
    }
    
    return
}

# assert --
#
# Assert type or value, throwing error if result is not expected
# 
# Arguments:
# value:        Value to compare
# op:           Operator (using mathop namespace). Default ==
# expected:     Expected value. Default 1, for true

proc ::flytrap::assert {value {op ==} {expected 1}} {
    if {![::tcl::mathop::$op $value $expected]} {
        return -code error "assert \"$value $op $expected\" failed"
    }
}

# Finally, provide the package
package provide flytrap @VERSION@
